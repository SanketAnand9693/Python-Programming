**Creating Lists**
letters = ["a", "b", ..]
matrix = [[0,1],[2,3]]
zeros = [0] * 5
list(range(20))
list("Hello World")
len(list("Hello World"))

**Accessing List Items**
l[0] / [0:3]=[:3] / [0:]=[:] / 
[::-1] reverse order / [::2] skipping number  

**Unpacking List**
l = [1,2]
f,s = l // f = l[0]
-var must be equal to items of list else
 f, *others = l

**Looping Over Lists**
ls = ["a", "b", "c"]
for i, l in enumerate(ls):  // return tuple (0, 'a')...
  //statement i having index l having list item

**Adding or Removing List Items**
l.append("...") // adding at last
l.insert(index, "...") // adding at particular index

l.pop()"at last" / (index) /return pop element
l.remove("item")
del l[0:3] // multiple element
l.clear() // all clear

**Finding List Items**
if "..." in l:
  print(l.index("...")

Sorting List
lnum.sort(reverse=True)  //mutable, reverse? for reversing
l.reverse()
l.copy() / return copy of list
sorted(lnum, reverse=True) //immutable

**Sorting List Of Tuples**
//by default sorted by tuple[0]
def sortItem(li):	
  return li[1]
items.sort(key=sortItem)

**Lambda Functions**
lambda parameters:expression
ls.sort(key=lambda l:l[1])

**Map Function**
-x = map(lambda l:l[1], ls)
-for i in x:
-  print(i)
or
-x = list(map(lambda l:l[1], ls))
-print(i)

**Filter Function**
-x = filter(lambda l:l[1]>=10, ls)
-for i in x:
-  print(i)
or
-x = list(filter(lambda l:l[1]>=10, ls))
-print(i)

**List Comprehension**
[exprrssion for item in items]
x = [l[1] for l in ls] // instead on map
x = [l for l in ls if i[1] >= 10] // instead on filter

**Zip Function**
print(list(zip("string", list1, list2)))
//returns list of tuples of corrosponding elements

**Creating Tuple**
t=tuple("string") // ("s", ...)
t= (1,2,3) / 1,2 / 1,
print(t[0:2])

**Unpacking Tuple**
x,y,z = t

**Swapping**
x=10
y=12
x,y=y,x


**CRUD Of Array**
from array import array
n = array("i", [1,2,3])
n.append("...")
n.insert(index)
n[index] = ...
n.pop()/(index)
n.remove() 

**CRUD Of Sets**
for unique elements
set([list of numbers]) // return {...}
sets = {1,2,3}
sets.add(...)
sets.pop()
sets.discard(...)
sets.remove(...)
sets.union(setn)
sets.intersection(setn)
set1 | set2 // return Union of sets
set1 & set2 // return Intersection of sets
set1 - set2 // return Difference in sets
set1 ^ set2 // return either inset1 or set2 not both
-can't access using index instead convert in list
check availibility using // if .. in set:

**CRUD Of Dictionaries**
dic = {"x":1,"y":2} or dict(x=1,y=2)
dict["x"] // access using
dict["x"] = 12 // insert/update
if "a" in dict: or dict.get("a")-None // check presence
dict.get("a", 0) // if not then add a=0
del dict["a"] // remove
for key in dict: 
  print(key,dict[key]) // OR
for key, value in dict.items();
  print(key,value)	//dict.items return tuple(key, value)


**Dictionary Comprehension**
{x: x*2 for x in range(5)} //even- {0:0, 1:2, 2:4...}


**Generator expression** 
-for dealing with large values
genval = (x*2 for x in range(100000)) // return generator obj which is iterable
lisval = [x*2 for x in range(100000)] // return list
from sys import getsizeof // for getting size
getsizeof(genval) is much smaller thn getsizeof(lisval)

**Generator Function**
-for dealing with multiple statement return
def funname():
  yield ...
  yield ...
  yield ...
x = funname()
x is a generator and is iterable

**Unpacking Operator**
l = [1,2,3,4]
print(*l) // 1 2 3 -like spread operstor of JS
d1 = {"x":1,"y":2 }
d2 = {"x":4,"z":5 }
d3 = {**d1, **d2} // unpacking operator for dict
print(d3) // {"x":4, "y":2, "z":5}